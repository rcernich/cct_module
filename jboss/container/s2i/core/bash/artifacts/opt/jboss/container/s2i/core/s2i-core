# include dependencies
source "${JBOSS_CONTAINER_UTIL_LOGGING_MODULE}/logging.sh"

function s2i_core_init() {
  # initialize core s2i environmet variables
  S2I_DESTINATION_DIR="${S2I_DESTINATION_DIR:-/tmp}"
  S2I_ARTIFACTS_DIR="${S2I_DESTINATION_DIR}/artifacts"
  S2I_SOURCE_DIR="${S2I_DESTINATION_DIR}/src"
  S2I_SOURCE_CONFIGURATION_DIR="${S2I_SOURCE_CONFIGURATION_DIR:-configuration}"
  S2I_SOURCE_DATA_DIR="${S2I_SOURCE_DATA_DIR:-data}"
  S2I_SOURCE_DEPLOYMENTS_DIR="${S2I_SOURCE_DEPLOYMENTS_DIR:-deployments}"
  S2I_TARGET_DEPLOYMENTS_DIR="${S2I_TARGET_DEPLOYMENTS_DIR:-${DEPLOYMENTS_DIR:-/deployments}}"
  S2I_TARGET_CONFIGURATION_DIR="${S2I_TARGET_DEPLOYMENTS_DIR}"
  S2I_TARGET_DATA_DIR="${S2I_TARGET_DEPLOYMENTS_DIR}"
  S2I_IMAGE_SOURCE_MOUNTS="${S2I_IMAGE_SOURCE_MOUNTS:-${CUSTOM_INSTALL_DIRECTORIES}}"
}

function s2i_core_copy_configuration() {
  if [ -d "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_CONFIGURATION_DIR}" ]; then
    if [ -d "${S2I_TARGET_CONFIGURATION_DIR}" ]; then
      rsync -rl --out-format='%n' "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_CONFIGURATION_DIR}"/ "${S2I_TARGET_CONFIGURATION_DIR}"
    else
      log_warning "Unable to copy configuration files.  No target directory specified for S2I_TARGET_CONFIGURATION_DIR"
    fi
  fi 
}

function s2i_core_copy_data() {
  if [ -d "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_DATA_DIR}" ]; then
    if [ -d "${S2I_TARGET_DATA_DIR}" ]; then
      rsync -rl --out-format='%n' "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_DATA_DIR}"/ "${S2I_TARGET_DATA_DIR}"
    else
      log_warning "Unable to copy data files.  No target directory specified for S2I_TARGET_DATA_DIR"
    fi
  fi 
}

function s2i_core_copy_deployments() {
  if [ -d "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_DEPLOYMENTS_DIR}" ]; then
    if [ -d "${S2I_TARGET_DEPLOYMENTS_DIR}" ]; then
      rsync -rl --out-format='%n' "${S2I_SOURCE_DIR}/${1}/${S2I_SOURCE_DEPLOYMENTS_DIR}"/ "${S2I_TARGET_DEPLOYMENTS_DIR}"
    else
      log_warning "Unable to copy deployment files.  No target directory specified for S2I_TARGET_DEPLOYMENTS_DIR"
    fi
  fi 
}

function s2i_core_copy_artifacts() {
  s2i_core_copy_configuration $*
  s2i_core_copy_data $*
  s2i_core_copy_deployments $*
}

function s2i_core_process_image_mounts() {
  if [ "x${S2I_IMAGE_SOURCE_MOUNTS}" = "x" ]; then
    return 0
  fi

  IFS=',' read -a install_dir_entries <<< $S2I_IMAGE_SOURCE_MOUNTS
  for install_dir_entry in "${install_dir_entries[@]}"; do
    for install_dir in $(find ${S2I_SOURCE_DIR}/$install_dir_entry -maxdepth 0 2>/dev/null); do
      chmod -R ug+x ${install_dir}
      if [ -f ${install_dir}/install.sh ]; then
        ${install_dir}/install.sh "${install_dir}"
      else
        s2i_core_copy_artifacts "${install_dir}"
      fi
    done
  done
}
